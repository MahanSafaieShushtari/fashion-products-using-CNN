import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import time
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
import re
import tensorflow as tf
from tensorflow import keras as ks
from keras.datasets import fashion_mnist
from sklearn.preprocessing import MinMaxScaler
import random
(xtrain,ytrain),(xtest,ytest)=fashion_mnist.load_data()
xtrain=((xtrain.reshape(-1,28,28,1))/255.0)
xt=xtest.copy()
xtest=((xtest.reshape(-1,28,28,1))/255.0)

# ytest,ytrain=ks.utils.to_categorical(xtest),ks.utils.to_categorical(xtrain)
model=ks.Sequential()
model.add(ks.layers.Conv2D(filters=64,kernel_size=(3,3),input_shape=(28,28,1),strides=(1,1),padding="valid",activation="relu"))
model.add(ks.layers.MaxPool2D())
model.add(ks.layers.Dropout(rate=0.5))
model.add(ks.layers.Conv2D(filters=64,kernel_size=(3,3),strides=(1,1),padding="same",activation="relu"))
model.add(ks.layers.MaxPool2D())
model.add(ks.layers.Dropout(rate=0.5))
model.add(ks.layers.Conv2D(filters=64,kernel_size=(3,3),strides=(1,1),padding="valid",activation="relu"))
model.add(ks.layers.MaxPool2D())
model.add(ks.layers.Dropout(rate=0.5))




model.add(ks.layers.Flatten())
model.add(ks.layers.Dense(units=300,activation="relu"))
model.add(ks.layers.BatchNormalization())
model.add(ks.layers.Dense(units=300,activation="relu"))
model.add(ks.layers.BatchNormalization())

model.add(ks.layers.Dense(units=300,activation="relu"))
model.add(ks.layers.Dense(units=300,activation="relu"))
model.add(ks.layers.Dense(units=10,activation="softmax"))

model.compile(optimizer=tf.optimizers.Adam(),loss=tf.losses.sparse_categorical_crossentropy,metrics=["accuracy"])
model.summary()
hist=model.fit(xtrain,ytrain,batch_size=254,validation_data=(xtest,ytest),epochs=50,verbose=1)


plt.plot(hist.history["loss"],color="blue")
plt.title("LOSS Linear chart")
plt.plot(hist.history["val_loss"],color="red")
plt.show()




#prediction section (still not completed)
rn=random.randint(0,xtest.shape[0])
result=model.predict(xtest[rn])
print(f"the result{result}, and the real answer is {ytest[rn]}")
plt.imshow(xt[rn])
plt.title("The image")
plt.show()
plt.plot(hist.history['accuracy'],color="blue")
plt.title("ACCURACY comparison")
plt.plot(hist.history['val_accuracy'],color="red")
plt.show()